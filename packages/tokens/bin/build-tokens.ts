import toCase from 'case';
import path from 'path';
import fs from 'fs-extra';
import flatten from 'flat';
import * as tokens from '../src';

const WARNING_TEXT = `/* DO NOT CHANGE!*/
/* This file is automatically generated from @entur/tokens! Changes will be overwritten. */`;

function format(value: string | number, key: string) {
  // Outlier, should not be treated as rem/px value
  if (key.startsWith('zIndex')) {
    return value;
  }
  return typeof value === 'number' ? `${value / 16}rem` : value;
}
const flatTokens: { [key: string]: string } = flatten(tokens);
function createVariablesWithPrefix(prefix: string) {
  return Object.entries(flatTokens)
    .filter(obj => !obj[0].includes('.rem.'))
    .map(([key, value]: [string, any]) => {
      return `${prefix}${toCase.kebab(toCase.camel(key))}: ${format(
        value,
        key,
      )};`;
    })
    .join('\n');
}

function run() {
  const cssString = `
${WARNING_TEXT}

:root {
${createVariablesWithPrefix('  --')}
}`;
  fs.outputFileSync(path.resolve('dist', 'styles.css'), cssString);
  console.log('✅ Created file with CSS properties');

  const scssString = `
${WARNING_TEXT}

${createVariablesWithPrefix('$')}`;
  fs.outputFileSync(path.resolve('dist', 'styles.scss'), scssString);
  console.log('✅ Created file with SCSS variables');

  const lessString = `${WARNING_TEXT}
${createVariablesWithPrefix('@')}
  `;
  fs.outputFileSync(path.resolve('dist', 'styles.less'), lessString);
  console.log('✅ Created file with LESS variables');
}
run();
