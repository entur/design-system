import fs from 'fs-extra';
import path from 'path';

type Color = { name: string; color: string; var: string; rootAlias: string };
type ColorMode = {
  mode: { name: string };
  color: Color[];
  number: Array<Record<string, string>>;
};
type variableSet = {
  css: string;
  scss?: string;
  less?: string;
  mode?: string;
};

const WARNING_TEXT = `/* DO NOT CHANGE!*/
/* This file is automatically generated from @entur/tokens! Changes will be overwritten. */`;

const primitiveFilePath = path.resolve(__dirname, '../src/primitive.json');
const semanticFilePath = path.resolve(__dirname, '../src/semantic.json');
const componentFilePath = path.resolve(__dirname, '../src/component.json');

try {
  const primitive = createPrimitiveSet();
  const semantic = createSemanticSet();
  const componentColors = createComponentColorSet();

  outputStylesFile(primitive, 'css', 'primitive');
  outputStylesFile(primitive, 'scss', 'primitive');
  outputStylesFile(primitive, 'less', 'primitive');
  outputStylesFile(semantic, 'css', 'semantic');
  outputStylesFile(semantic, 'scss', 'semantic');
  outputStylesFile(semantic, 'less', 'semantic');

  outputComponentColorsFile(componentColors);
} catch (error) {
  console.error(`Error creating color variables: ${error}`);
}

function createPrimitiveSet() {
  const primitivesFileData = fs.readFileSync(primitiveFilePath, 'utf-8');
  const primitiveColors = JSON.parse(primitivesFileData)?.[0]?.color;

  const mappedPrimitiveColors = primitiveColors.map((color: Color) => {
    const cssVariableKey = `--${toKebabCase(color.name)}`;
    const cssVariableValue = color.color;

    const scssVariableKey = `$${toKebabCase(color.name)}`;
    const scssVariableValue = color.color;

    const lessVariableKey = `@${toKebabCase(color.name)}`;
    const lessVariableValue = color.color;

    return {
      css: `${cssVariableKey}: ${cssVariableValue};`,
      scss: `${scssVariableKey}: ${scssVariableValue};`,
      less: `${lessVariableKey}: ${lessVariableValue};`,
    };
  });

  return mappedPrimitiveColors;
}

function createSemanticSet() {
  const semanticFileData = fs.readFileSync(semanticFilePath, 'utf-8');
  const semanticColors = JSON.parse(semanticFileData)?.[0]?.color;

  const mappedSemanticColors = semanticColors.map((color: Color) => {
    const colorNameInKebabCase = toKebabCase(color.name);
    const varNameInKebabCase = toKebabCase(color.var);

    const cssVariableKey = `--${colorNameInKebabCase}`;
    const cssVariableValue = `var(--${varNameInKebabCase})`;

    const scssVariableKey = `$${colorNameInKebabCase}`;
    const scssVariableValue = `$${varNameInKebabCase}`;

    const lessVariableKey = `@${colorNameInKebabCase}`;
    const lessVariableValue = `@${varNameInKebabCase}`;

    return {
      css: `${cssVariableKey}: ${cssVariableValue};`,
      scss: `${scssVariableKey}: ${scssVariableValue};`,
      less: `${lessVariableKey}: ${lessVariableValue};`,
    };
  });

  return mappedSemanticColors;
}

function createComponentColorSet() {
  const componentFileData = fs.readFileSync(componentFilePath, 'utf-8');
  const componentColors = JSON.parse(componentFileData);

  const mappedComponentColors: variableSet[] = componentColors.reduce(
    (allComponentColors: variableSet[], colorMode: ColorMode) => {
      const mappedComponentColorsForMode: variableSet[] = colorMode.color.map(
        (color: Color) => {
          const colorNameInKebabCase = toKebabCase(color.name);
          const varNameInKebabCase = toKebabCase(color.var);
          const colorModeName = colorMode.mode.name.toLowerCase();

          const cssVariableKey = `--${colorNameInKebabCase}`;
          const cssVariableValue = `var(--${varNameInKebabCase})`;

          return {
            css: `${cssVariableKey}: ${cssVariableValue};`,
            mode: colorModeName,
          };
        },
      );

      return [...allComponentColors, ...mappedComponentColorsForMode];
    },
    [],
  );
  return mappedComponentColors;
}

function outputStylesFile(
  variables: variableSet[],
  extension: 'css' | 'scss' | 'less',
  name: 'styles' | 'primitive' | 'semantic' | 'component' = 'styles',
) {
  const PRIMITIVE_IMPORT_PATH = `'~@entur/tokens/dist/primitive.${extension}';`;
  const IMPORT_SYNTAX = { css: '@import', scss: '@use', less: '@import' };

  const outputString = `${
    name === 'semantic'
      ? `${IMPORT_SYNTAX[extension]} ${PRIMITIVE_IMPORT_PATH}`
      : ''
  }
${WARNING_TEXT}
${extension === 'css' ? ':root {' : ''}
${extension === 'css' ? '\t' : ''}${variables
    .map(color => color?.[extension])
    .join(`\n${extension === 'css' ? '\t' : ''}`)}
${extension === 'css' ? '}' : ''}
`;

  fs.outputFileSync(path.resolve('dist', `${name}.${extension}`), outputString);
}

function outputComponentColorsFile(
  variables: variableSet[],
  name = 'componentColors',
) {
  const CSS_SEMANTIC_IMPORT_TEXT = `@use '~@entur/tokens/dist/semantic.css';`;

  const packageNames = getAllPackageNames();

  packageNames.forEach(packageName => {
    const variablesForPackage = variables.filter(variable =>
      variable.css.includes(`-${packageName}-`),
    );

    if (variablesForPackage.length === 0) {
      return;
    }

    const outputString = `
${CSS_SEMANTIC_IMPORT_TEXT}
${WARNING_TEXT}
[data-color-mode='light'],
:root {
\t${variablesForPackage
      .filter(variable => variable?.mode === 'light')
      .map(variable => variable.css)
      .join('\n\t')}
}

[data-color-mode='dark'] {
\t${variablesForPackage
      .filter(variable => variable?.mode === 'dark')
      .map(variable => variable.css)
      .join('\n\t')}
}
`;

    fs.outputFileSync(
      path.resolve(__dirname, '../../', packageName, 'src', `${name}.scss`),
      outputString,
    );
  });
}

function getAllPackageNames() {
  const packageNames = fs
    .readdirSync(path.resolve(__dirname, '../../../packages'), {
      withFileTypes: true,
    })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);

  return packageNames;
}

function toKebabCase(name: string) {
  return name.replace(/\//g, '-').replace(/\s/g, '').toLowerCase();
}
