import fs from 'fs-extra';
import path from 'path';

type Color = { name: string; color: string; var: string; rootAlias: string };
type variableSet = { css: string; scss: string; less: string };

const primitiveFilePath = path.resolve(__dirname, '../src/primitive.json');
const semanticFilePath = path.resolve(__dirname, '../src/semantic.json');

try {
  const primitive = createPrimitive();
  const semantic = createSemantic();

  outputStylesFile(primitive, 'css', 'primitive');
  outputStylesFile(primitive, 'scss', 'primitive');
  outputStylesFile(primitive, 'less', 'primitive');
  outputStylesFile(semantic, 'css', 'semantic');
  outputStylesFile(semantic, 'scss', 'semantic');
  outputStylesFile(semantic, 'less', 'semantic');
} catch (error) {
  console.error(`Error creating color variables: ${error}`);
}

function createPrimitive() {
  const primitivesFileData = fs.readFileSync(primitiveFilePath, 'utf-8');
  const primitiveColors = JSON.parse(primitivesFileData)?.[0]?.color;

  const mappedPrimitiveColors = primitiveColors.map((color: Color) => {
    const cssVariableKey = `--${color.name.replace('/', '-').toLowerCase()}`;
    const cssVariableValue = color.color;

    const scssVariableKey = `$${color.name.replace('/', '-').toLowerCase()}`;
    const scssVariableValue = color.color;

    const lessVariableKey = `@${color.name.replace('/', '-').toLowerCase()}`;
    const lessVariableValue = color.color;

    return {
      css: `${cssVariableKey}: ${cssVariableValue};`,
      scss: `${scssVariableKey}: ${scssVariableValue};`,
      less: `${lessVariableKey}: ${lessVariableValue};`,
    };
  });

  return mappedPrimitiveColors;
}

function createSemantic() {
  const semanticFileData = fs.readFileSync(semanticFilePath, 'utf-8');
  const semanticColors = JSON.parse(semanticFileData)?.[0]?.color;

  const mappedSemanticColors = semanticColors.map((color: Color) => {
    const colorNameInKebabCase = color.name.replace(/\//g, '-').toLowerCase();
    const varNameInKebabCase = color.var.replace(/\//g, '-').toLowerCase();

    const cssVariableKey = `--${colorNameInKebabCase}`;
    const cssVariableValue = `var(--${varNameInKebabCase})`;

    const scssVariableKey = `$${colorNameInKebabCase}`;
    const scssVariableValue = `$${varNameInKebabCase}`;

    const lessVariableKey = `@${colorNameInKebabCase}`;
    const lessVariableValue = `@${varNameInKebabCase}`;

    return {
      css: `${cssVariableKey}: ${cssVariableValue};`,
      scss: `${scssVariableKey}: ${scssVariableValue};`,
      less: `${lessVariableKey}: ${lessVariableValue};`,
    };
  });

  return mappedSemanticColors;
}

function outputStylesFile(
  variables: variableSet[],
  extension: 'css' | 'scss' | 'less',
  name: 'styles' | 'primitive' | 'semantic' = 'styles',
) {
  const WARNING_TEXT = `/* DO NOT CHANGE!*/
  /* This file is automatically generated from @entur/tokens! Changes will be overwritten. */`;
  const PRIMITIVE_IMPORT_PATH = `'~@entur/tokens/dist/primitive.${extension}';`;
  const IMPORT_SYNTAX = { css: '@import', scss: '@use', less: '@import' };

  const outputString = `${
    name === 'semantic'
      ? `${IMPORT_SYNTAX[extension]} ${PRIMITIVE_IMPORT_PATH}`
      : ''
  }
${WARNING_TEXT}
${extension === 'css' ? ':root {' : ''}
${extension === 'css' ? '\t' : ''}${variables
    .map(color => color?.[extension])
    .join(`\n${extension === 'css' ? '\t' : ''}`)}
${extension === 'css' ? '}' : ''}
`;

  fs.outputFileSync(path.resolve('dist', `${name}.${extension}`), outputString);
}
