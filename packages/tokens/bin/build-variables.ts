import fs from 'fs-extra';
import path from 'path';

import {
  toKebabCase,
  toFlattenedJSObjectKey,
  getAllPackageNames,
  Color,
  ColorMode,
  variableSet,
} from './utils';

export const WARNING_TEXT = `/* DO NOT CHANGE!*/
/* This file is automatically generated from @entur/tokens! Changes will be overwritten. */`;

export const primitiveFilePath = path.resolve(
  __dirname,
  '../src/primitive.json',
);
export const semanticFilePath = path.resolve(__dirname, '../src/semantic.json');
export const baseFilePath = path.resolve(__dirname, '../src/base.json');
export const dataFilePath = path.resolve(__dirname, '../src/data.json');
export const transportFilePath = path.resolve(
  __dirname,
  '../src/transport.json',
);
const componentFilePath = path.resolve(__dirname, '../src/component.json');

const outputExtensions: Array<'css' | 'scss' | 'less'> = [
  'css',
  'scss',
  'less',
];

try {
  const primitive = createPrimitiveSet(primitiveFilePath);
  const transport = createPrimitiveSet(transportFilePath);
  const semantic = createVariablesSet(semanticFilePath);
  const data = createComponentColorSet(dataFilePath);
  const base = createComponentColorSet(baseFilePath);
  const componentColors = createComponentColorSet();

  outputExtensions.forEach(extension => {
    outputStylesFile(primitive, extension, 'primitive');
    outputStylesFile(semantic, extension, 'semantic');
    outputStylesFile(transport, extension, 'transport');
  });

  outputComponentColorsFile(data, 'data', true);
  outputComponentColorsFile(base, 'base', true);
  outputComponentColorsFile(componentColors);
} catch (error) {
  console.error(`Error creating color variables: ${error}`);
}

export function createPrimitiveSet(filePath: string) {
  const primitivesFileData = fs.readFileSync(filePath, 'utf-8');
  const primitiveColors = JSON.parse(primitivesFileData)?.[0]?.color;

  const mappedPrimitiveColors = primitiveColors.map((color: Color) => {
    const cssVariableKey = `--${toKebabCase(color.name)}`;
    const scssVariableKey = `$${toKebabCase(color.name)}`;
    const lessVariableKey = `@${toKebabCase(color.name)}`;
    const jsVariableKey = `${toFlattenedJSObjectKey(color.name)}`;

    const variableValue = color.color;

    return {
      css: `${cssVariableKey}: ${variableValue};`,
      scss: `${scssVariableKey}: ${variableValue};`,
      less: `${lessVariableKey}: ${variableValue};`,
      js: { [jsVariableKey]: `${variableValue}` },
    };
  });

  return mappedPrimitiveColors;
}

export function createVariablesSet(filePath: string) {
  const variablesFileData = fs.readFileSync(filePath, 'utf-8');
  const variablesColors = JSON.parse(variablesFileData)?.[0]?.color;

  const mappedVariablesColors = variablesColors.map((color: Color) => {
    const colorNameInKebabCase = toKebabCase(color.name);
    const varNameInKebabCase = toKebabCase(color.var);

    const cssVariableKey = `--${colorNameInKebabCase}`;
    const cssVariableValue = `var(--${varNameInKebabCase})`;

    const scssVariableKey = `$${colorNameInKebabCase}`;
    const scssVariableValue = `$${varNameInKebabCase}`;

    const lessVariableKey = `@${colorNameInKebabCase}`;
    const lessVariableValue = `@${varNameInKebabCase}`;

    const jsVariableKey = `${toFlattenedJSObjectKey(color.name)}`;
    const hexValue = color.color;

    return {
      css: `${cssVariableKey}: ${cssVariableValue};`,
      scss: `${scssVariableKey}: ${scssVariableValue};`,
      less: `${lessVariableKey}: ${lessVariableValue};`,
      js: { [jsVariableKey]: hexValue },
    };
  });

  return mappedVariablesColors;
}

export function createComponentColorSet(filePath = componentFilePath) {
  const componentFileData = fs.readFileSync(filePath, 'utf-8');
  const componentColors = JSON.parse(componentFileData);

  const mappedComponentColors: variableSet[] = componentColors.reduce(
    (allComponentColors: variableSet[], colorMode: ColorMode) => {
      const mappedComponentColorsForMode: variableSet[] = colorMode.color.map(
        (color: Color) => {
          const colorNameInKebabCase = toKebabCase(color.name);
          const varNameInKebabCase = toKebabCase(color.var);
          const colorModeName = colorMode.mode.name.toLowerCase();

          const cssVariableKey = `--${colorNameInKebabCase}`;
          const cssVariableValue = `var(--${varNameInKebabCase})`;

          const scssVariableKey = `$${colorNameInKebabCase}`;
          const scssVariableValue = `$${varNameInKebabCase}`;

          const lessVariableKey = `@${colorNameInKebabCase}`;
          const lessVariableValue = `@${varNameInKebabCase}`;

          const jsVariableKey = `${colorModeName}.${toFlattenedJSObjectKey(
            color.name,
          )}`;
          const hexValue = color.color;

          return {
            css: `${cssVariableKey}: ${
              varNameInKebabCase !== '' ? cssVariableValue : hexValue
            };`,
            scss: `${scssVariableKey}: ${
              varNameInKebabCase !== '' ? scssVariableValue : hexValue
            };`,
            less: `${lessVariableKey}: ${
              varNameInKebabCase !== '' ? lessVariableValue : hexValue
            };`,
            js: { [jsVariableKey]: hexValue },
            mode: colorModeName,
          };
        },
      );

      return [...allComponentColors, ...mappedComponentColorsForMode];
    },
    [],
  );
  return mappedComponentColors;
}

function outputStylesFile(
  variables: variableSet[],
  extension: 'css' | 'scss' | 'less',
  name:
    | 'styles'
    | 'primitive'
    | 'semantic'
    | 'base'
    | 'transport'
    | 'component' = 'styles',
) {
  const PRIMITIVE_IMPORT_PATH = `'~@entur/tokens/dist/primitive.${extension}';`;
  const IMPORT_SYNTAX = { css: '@import', scss: '@use', less: '@import' };

  const outputString = `${
    name === 'semantic'
      ? `${IMPORT_SYNTAX[extension]} ${PRIMITIVE_IMPORT_PATH}`
      : ''
  }
${WARNING_TEXT}
${extension === 'css' ? ':root {' : ''}
${extension === 'css' ? '\t' : ''}${variables
    .map(color => color?.[extension])
    .join(`\n${extension === 'css' ? '\t' : ''}`)}
${extension === 'css' ? '}' : ''}
`;

  fs.outputFileSync(path.resolve('dist', `${name}.${extension}`), outputString);
}

function outputComponentColorsFile(
  variables: variableSet[],
  name = 'componentColors',
  outputToTokensPackage = false,
) {
  if (outputToTokensPackage) {
    const outputStringCss = generateComponentColorsString(variables, '@import');
    const outputStringScss = generateComponentColorsString(
      variables,
      '@use',
      'scss',
    );
    const outputStringLess = generateComponentColorsString(
      variables,
      '@import',
      'less',
    );

    fs.outputFileSync(path.resolve('dist', `${name}.css`), outputStringCss);
    fs.outputFileSync(path.resolve('dist', `${name}.scss`), outputStringScss);
    fs.outputFileSync(path.resolve('dist', `${name}.less`), outputStringLess);
  }

  const packageNames = getAllPackageNames();

  packageNames.forEach(packageName => {
    const variablesForPackage = variables.filter(variable =>
      variable.css.includes(`-${packageName}-`),
    );

    if (variablesForPackage.length === 0) {
      return;
    }

    let outputString = '';
    if (packageName === 'layout') {
      outputString = generateComponentColorsString(
        variablesForPackage,
        '@import',
      );
    } else {
      outputString = generateComponentColorsString(variablesForPackage);
    }

    fs.outputFileSync(
      path.resolve(__dirname, '../../', packageName, 'src', `${name}.scss`),
      outputString,
    );
  });
}

function generateComponentColorsString(
  variableSet: variableSet[],
  importSyntax = '@use',
  extension: 'css' | 'scss' | 'less' = 'css',
) {
  const CSS_SEMANTIC_IMPORT_TEXT = `${importSyntax} '~@entur/tokens/dist/semantic.${extension}';`;

  const outputString = `${CSS_SEMANTIC_IMPORT_TEXT}
${WARNING_TEXT}
[data-color-mode='light'],
:root {
  ${variableSet
    .filter(variable => variable?.mode === 'light')
    .map(variable => variable?.[extension])
    .join('\n  ')}
}

[data-color-mode='dark'] {
  ${variableSet
    .filter(variable => variable?.mode === 'dark')
    .map(variable => variable?.[extension])
    .join('\n  ')}
}
`;

  return outputString;
}
