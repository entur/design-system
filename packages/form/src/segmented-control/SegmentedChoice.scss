@use '@entur/tokens/dist/styles.scss' as t;

/// Create inset focus
/// @access public
/// @param {Color} $color-focus - focus color
/// @param {Color} $color-bg - background color
/// @return {Box-shadow}
@function inset-focus($color-focus, $color-bg) {
  @return inset 0 0 0 t.$border-widths-small $color-bg, inset 0 0 0 calc(#{t.$border-widths-medium} + #{t.$border-widths-small}) $color-focus;
}

.eds-segmented-choice {
  display: block;
  flex: 1 1 0px;
  .eds-base-segmented {
    --background-color: var(--components-form-segmentedcontrol-standard-fill-unselected);

    background-color: var(--background-color);
    border-radius: t.$border-widths-large;
    color: var(--components-form-segmentedcontrol-standard-text-unselected);
    cursor: pointer;
    font-size: t.$font-sizes-medium;
    height: t.$space-large;
    line-height: t.$line-heights-medium;
    margin: t.$space-extra-small2;
    outline-color: transparent;
    padding: calc(#{t.$space-extra-small2}/ 2) t.$space-small;
    text-align: center;
    user-select: none;

    &--large {
      font-size: t.$font-sizes-large;
      height: t.$space-extra-large2;
      line-height: t.$line-heights-extra-large;
      padding: t.$space-extra-small t.$space-small;
    }

    .eds-contrast & {
      --background-color: var(--components-form-segmentedcontrol-contrast-background);
      color: var(--components-form-segmentedcontrol-contrast-text-unselected);
    }
  }

  &:hover input {
    &:not(:checked) + .eds-base-segmented {
      --background-color: var(--components-form-segmentedcontrol-standard-fill-hover);
      .eds-contrast & {
        --background-color: var(--components-form-segmentedcontrol-contrast-fill-hover);
      }
    }
    &:checked + .eds-base-segmented {
      --background-color: var(--components-form-segmentedcontrol-standard-fill-hover);
      color: var(--components-form-segmentedcontrol-standard-text-unselected);
      .eds-contrast & {
        --background-color: var(--components-form-segmentedcontrol-contrast-fill-hover);
        color: var(--components-form-segmentedcontrol-contrast-text-unselected);
      }
    }
  }

  input {
    appearance: none;
    position: absolute;
    opacity: 0;
    height: 0;
    width: 0;

    &:checked + .eds-base-segmented {
      --background-color: var(--components-form-segmentedcontrol-standard-fill-selected);
      color: var(--components-form-segmentedcontrol-standard-text-selected);
      box-shadow: t.$shadows-box-shadow; // TODO missing variable

      .eds-contrast & {
        --background-color: var(--components-form-segmentedcontrol-contrast-fill-selected);
        box-shadow: t.$shadows-box-shadow-contrast; // TODO missing variable
        color: var(--components-form-segmentedcontrol-contrast-text-selected);
      }
    }

    &:focus-visible {
      &:not(:checked) + .eds-base-segmented {
        outline: t.$outlines-focus;
        outline-color: var(--basecolors-stroke-focus-standard);
        outline-offset: t.$outline-offsets-focus;
        .eds-contrast & {
          outline-color: var(--basecolors-stroke-focus-contrast);
        }
      }
      &:checked + .eds-base-segmented {
        outline: t.$outlines-focus;
        outline-color: var(--basecolors-stroke-focus-standard);
        outline-offset: t.$outline-offsets-focus;

        .eds-contrast & {
          outline-color: var(--basecolors-stroke-focus-contrast);
        }
      }
    }
  }
}
